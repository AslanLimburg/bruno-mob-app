const sharp = require('sharp');
const fs = require('fs');
const path = require('path');

// –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –∏–∫–æ–Ω–∫–µ
const sourceIcon = path.join(__dirname, 'public/images/logo.png');

// –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Android —Ä–µ—Å—É—Ä—Å–æ–≤
const androidResPath = path.join(__dirname, 'android/app/src/main/res');

// –†–∞–∑–º–µ—Ä—ã –¥–ª—è Android
const sizes = [
  { folder: 'mipmap-mdpi', size: 48 },
  { folder: 'mipmap-hdpi', size: 72 },
  { folder: 'mipmap-xhdpi', size: 96 },
  { folder: 'mipmap-xxhdpi', size: 144 },
  { folder: 'mipmap-xxxhdpi', size: 192 }
];

async function generateIcons() {
  console.log('üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∫–æ–Ω–∫–∏ –¥–ª—è Android...\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
  if (!fs.existsSync(sourceIcon)) {
    console.error('‚ùå –ò—Å—Ö–æ–¥–Ω–∞—è –∏–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', sourceIcon);
    process.exit(1);
  }

  for (const { folder, size } of sizes) {
    const dirPath = path.join(androidResPath, folder);
    
    // –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(dirPath)) {
      fs.mkdirSync(dirPath, { recursive: true });
    }

    const iconPath = path.join(dirPath, 'ic_launcher.png');
    const iconPathRound = path.join(dirPath, 'ic_launcher_round.png');

    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É
      await sharp(sourceIcon)
        .resize(size, size, {
          fit: 'cover',
          position: 'center'
        })
        .png()
        .toFile(iconPath);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä—É–≥–ª—É—é –∏–∫–æ–Ω–∫—É
      await sharp(sourceIcon)
        .resize(size, size, {
          fit: 'cover',
          position: 'center'
        })
        .composite([{
          input: Buffer.from(
            `<svg><circle cx="${size/2}" cy="${size/2}" r="${size/2}" /></svg>`
          ),
          blend: 'dest-in'
        }])
        .png()
        .toFile(iconPathRound);

      console.log(`‚úÖ ${folder}: ${size}x${size} (–∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –∏ –∫—Ä—É–≥–ª–∞—è)`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ${folder}:`, error.message);
    }
  }

  console.log('\nüéâ –í—Å–µ –∏–∫–æ–Ω–∫–∏ —Å–æ–∑–¥–∞–Ω—ã!');
}

generateIcons().catch(err => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
  process.exit(1);
});

