const { pool } = require('../config/database');
const ledgerService = require('../services/ledgerService');

class PayoutWorker {
  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–ø–ª–∞—Ç—ã –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞
   * @param {number} challengeId - ID —á–µ–ª–ª–µ–Ω–¥–∂–∞
   * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  async processPayouts(challengeId) {
    const client = await pool.connect();

    try {
      await client.query('BEGIN');

      console.log(`\nüéØ Starting payout processing for challenge ${challengeId}...`);

      // 1. –ü–æ–ª—É—á–∏—Ç—å challenge
      const challengeQuery = `
        SELECT * FROM challenges
        WHERE id = $1 AND status = 'resolved'
        FOR UPDATE
      `;
      const challengeResult = await client.query(challengeQuery, [challengeId]);

      if (challengeResult.rows.length === 0) {
        throw new Error('Challenge not found or not in resolved status');
      }

      const challenge = challengeResult.rows[0];

      if (!challenge.winning_option_id) {
        throw new Error('Challenge has no winning option set');
      }

      console.log(`üìã Challenge: ${challenge.title}`);
      console.log(`üèÜ Winning option: ${challenge.winning_option_id}`);
      console.log(`üí∞ Payout mode: ${challenge.payout_mode}`);

      // 2. –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∞–≤–∫–∏
      const betsQuery = `
        SELECT * FROM bets
        WHERE challenge_id = $1 AND status = 'active'
        FOR UPDATE
      `;
      const betsResult = await client.query(betsQuery, [challengeId]);
      const allBets = betsResult.rows;

      if (allBets.length === 0) {
        console.log('‚ö†Ô∏è No active bets found for this challenge');
        await client.query('COMMIT');
        return { success: true, message: 'No bets to process' };
      }

      console.log(`üìä Total bets: ${allBets.length}`);

      // 3. –†–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö
      const winningBets = allBets.filter(bet => bet.option_id === challenge.winning_option_id);
      const losingBets = allBets.filter(bet => bet.option_id !== challenge.winning_option_id);

      console.log(`‚úÖ Winning bets: ${winningBets.length}`);
      console.log(`‚ùå Losing bets: ${losingBets.length}`);

      // 4. –í—ã—á–∏—Å–ª–∏—Ç—å pool –∏ commission
      const totalPool = allBets.reduce((sum, bet) => sum + parseFloat(bet.amount), 0);
      const commission = totalPool * 0.10; // 10%
      const distributableAmount = totalPool - commission;

      console.log(`üíµ Total pool: ${totalPool.toFixed(2)} BRT`);
      console.log(`üè¶ Commission (10%): ${commission.toFixed(2)} BRT`);
      console.log(`üí∏ Distributable: ${distributableAmount.toFixed(2)} BRT`);

      // 5. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–ø–ª–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
      let payoutResults;

      if (challenge.payout_mode === 'pool_based') {
        payoutResults = await this.processPoolBasedPayouts(
          client,
          challenge,
          winningBets,
          distributableAmount
        );
      } else if (challenge.payout_mode === 'fixed_creator_prize') {
        payoutResults = await this.processFixedPrizePayouts(
          client,
          challenge,
          winningBets
        );
      } else {
        throw new Error(`Unknown payout mode: ${challenge.payout_mode}`);
      }

      // 6. –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ —Å—Ç–∞–≤–∫–∏
      for (const bet of losingBets) {
        await client.query(
          `UPDATE bets SET status = 'lost', payout = 0 WHERE id = $1`,
          [bet.id]
        );
      }

      console.log(`üíÄ Updated ${losingBets.length} losing bets`);

      // 7. –ù–∞—á–∏—Å–ª–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é –Ω–∞ admin (id=1)
      const adminId = 1;
      await ledgerService.creditCommission(client, adminId, commission, challengeId);
      console.log(`üè¶ Commission ${commission.toFixed(2)} BRT credited to admin (id=${adminId})`);

      // 8. –û–±–Ω–æ–≤–∏—Ç—å payout_job status
      await client.query(
        `UPDATE payout_jobs 
         SET status = 'completed', completed_at = NOW()
         WHERE challenge_id = $1 AND status = 'pending'`,
        [challengeId]
      );

      await client.query('COMMIT');

      console.log(`‚úÖ Payout processing completed for challenge ${challengeId}\n`);

      return {
        success: true,
        totalPool,
        commission,
        distributableAmount,
        winningBetsCount: winningBets.length,
        losingBetsCount: losingBets.length,
        payouts: payoutResults
      };

    } catch (error) {
      await client.query('ROLLBACK');
      console.error(`‚ùå Error processing payouts for challenge ${challengeId}:`, error.message);

      // –û–±–Ω–æ–≤–∏—Ç—å payout_job —Å –æ—à–∏–±–∫–æ–π
      await client.query(
        `UPDATE payout_jobs 
         SET status = 'failed', 
             error_message = $1,
             attempt_count = attempt_count + 1
         WHERE challenge_id = $2 AND status = 'pending'`,
        [error.message, challengeId]
      );

      throw error;
    } finally {
      client.release();
    }
  }

  /**
   * Pool-based –≤—ã–ø–ª–∞—Ç—ã: –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏ –¥–µ–ª—è—Ç –ø—É–ª –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å—Ç–∞–≤–∫–∞–º
   */
  async processPoolBasedPayouts(client, challenge, winningBets, distributableAmount) {
    if (winningBets.length === 0) {
      console.log('‚ö†Ô∏è No winning bets - all money goes to commission');
      return [];
    }

    // –°—É–º–º–∞ –≤—Å–µ—Ö –ø–æ–±–µ–¥–∏–≤—à–∏—Ö —Å—Ç–∞–≤–æ–∫
    const winningPool = winningBets.reduce((sum, bet) => sum + parseFloat(bet.amount), 0);

    console.log(`üéØ Winning pool: ${winningPool.toFixed(2)} BRT`);

    const payouts = [];

    for (const bet of winningBets) {
      const betAmount = parseFloat(bet.amount);
      
      // –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–æ–ª—è –æ—Ç distributable amount
      const userPayout = (betAmount / winningPool) * distributableAmount;

      // –ù–∞—á–∏—Å–ª–∏—Ç—å –≤—ã–∏–≥—Ä—ã—à
      await ledgerService.creditPayout(
        client,
        bet.user_id,
        userPayout,
        challenge.id,
        bet.id
      );

      // –û–±–Ω–æ–≤–∏—Ç—å bet
      await client.query(
        `UPDATE bets 
         SET status = 'won', payout = $1
         WHERE id = $2`,
        [userPayout, bet.id]
      );

      payouts.push({
        userId: bet.user_id,
        betId: bet.id,
        betAmount: betAmount,
        payout: userPayout
      });

      console.log(`üí∞ User ${bet.user_id}: bet ${betAmount.toFixed(2)} BRT ‚Üí payout ${userPayout.toFixed(2)} BRT`);
    }

    return payouts;
  }

  /**
   * Fixed creator prize –≤—ã–ø–ª–∞—Ç—ã: –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏ –¥–µ–ª—è—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏–∑
   */
  async processFixedPrizePayouts(client, challenge, winningBets) {
    const creatorPrize = parseFloat(challenge.creator_prize_reserved) || 0;

    if (creatorPrize === 0) {
      throw new Error('Creator prize is not set for fixed_creator_prize mode');
    }

    if (winningBets.length === 0) {
      console.log('‚ö†Ô∏è No winning bets - creator prize stays reserved');
      return [];
    }

    console.log(`üéÅ Creator prize: ${creatorPrize.toFixed(2)} BRT`);

    // –°—É–º–º–∞ –≤—Å–µ—Ö –ø–æ–±–µ–¥–∏–≤—à–∏—Ö —Å—Ç–∞–≤–æ–∫
    const winningPool = winningBets.reduce((sum, bet) => sum + parseFloat(bet.amount), 0);

    const payouts = [];

    for (const bet of winningBets) {
      const betAmount = parseFloat(bet.amount);
      
      // –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–æ–ª—è –æ—Ç creator prize
      const userPayout = (betAmount / winningPool) * creatorPrize;

      // –ù–∞—á–∏—Å–ª–∏—Ç—å –≤—ã–∏–≥—Ä—ã—à
      await ledgerService.creditPayout(
        client,
        bet.user_id,
        userPayout,
        challenge.id,
        bet.id
      );

      // –û–±–Ω–æ–≤–∏—Ç—å bet
      await client.query(
        `UPDATE bets 
         SET status = 'won', payout = $1
         WHERE id = $2`,
        [userPayout, bet.id]
      );

      payouts.push({
        userId: bet.user_id,
        betId: bet.id,
        betAmount: betAmount,
        payout: userPayout
      });

      console.log(`üí∞ User ${bet.user_id}: bet ${betAmount.toFixed(2)} BRT ‚Üí payout ${userPayout.toFixed(2)} BRT`);
    }

    return payouts;
  }
}

module.exports = new PayoutWorker();
