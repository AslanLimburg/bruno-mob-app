const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  database: process.env.DB_NAME,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD
});

async function checkStructure() {
  try {
    // –°–º–æ—Ç—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
    const result = await pool.query(`
      SELECT column_name, data_type 
      FROM information_schema.columns 
      WHERE table_name = 'users'
      ORDER BY ordinal_position
    `);
    
    console.log('\nüìã –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´ USERS:\n');
    result.rows.forEach(col => {
      console.log(`   - ${col.column_name} (${col.data_type})`);
    });
    
    // –¢–µ–ø–µ—Ä—å –ø–æ—Å–º–æ—Ç—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await pool.query('SELECT * FROM users LIMIT 5');
    
    console.log('\n\nüë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:\n');
    users.rows.forEach((user, i) => {
      console.log(`\n${i + 1}. ${user.email || user.username || 'Unknown'}`);
      console.log(`   –í—Å–µ –ø–æ–ª—è:`, JSON.stringify(user, null, 2));
    });
    
    await pool.end();
    process.exit(0);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', err.message);
    process.exit(1);
  }
}

checkStructure();
