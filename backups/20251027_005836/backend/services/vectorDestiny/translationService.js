const OpenAI = require('openai');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY || 'your-api-key-here'
});

// –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–∞–∑–≤–∞–Ω–∏–π —è–∑—ã–∫–æ–≤
const LANGUAGE_NAMES = {
    en: 'English',
    ru: 'Russian',
    es: 'Spanish',
    fr: 'French',
    de: 'German',
    zh: 'Chinese',
    ja: 'Japanese',
    ar: 'Arabic',
    pt: 'Portuguese',
    it: 'Italian'
};

// –ö—ç—à –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (–≤ –ø–∞–º—è—Ç–∏)
const translationCache = new Map();

// –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –∫—ç—à–∞
function getCacheKey(text, targetLang) {
    return `${targetLang}:${text}`;
}

// –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ OpenAI
async function translateText(text, targetLanguage) {
    // –ï—Å–ª–∏ —É–∂–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞ API
    if (targetLanguage === 'en' || !process.env.OPENAI_API_KEY) {
        return text;
    }
    
    const cacheKey = getCacheKey(text, targetLanguage);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (translationCache.has(cacheKey)) {
        return translationCache.get(cacheKey);
    }
    
    try {
        const languageName = LANGUAGE_NAMES[targetLanguage] || targetLanguage;
        
        const response = await openai.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [
                {
                    role: "system",
                    content: `You are a professional translator. Translate the given text to ${languageName}. Provide ONLY the translation, no explanations or additional text.`
                },
                {
                    role: "user",
                    content: text
                }
            ],
            temperature: 0.3,
            max_tokens: 200
        });
        
        const translation = response.choices[0].message.content.trim();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        translationCache.set(cacheKey, translation);
        
        return translation;
        
    } catch (error) {
        console.error('Translation error:', error.message);
        // Fallback –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        return text;
    }
}

// –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–∞—Å—Å–∏–≤ –æ–ø—Ü–∏–π
async function translateOptions(options, targetLanguage) {
    if (targetLanguage === 'en' || !Array.isArray(options)) {
        return options;
    }
    
    try {
        const translations = await Promise.all(
            options.map(option => translateText(option, targetLanguage))
        );
        return translations;
    } catch (error) {
        console.error('Options translation error:', error);
        return options;
    }
}

// –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç—ã
async function translateQuestion(question, targetLanguage) {
    if (targetLanguage === 'en') {
        return question;
    }
    
    const translated = { ...question };
    
    try {
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        translated.question_text = await translateText(question.question_text, targetLanguage);
        
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–ø—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (question.options) {
            const optionsArray = Array.isArray(question.options) 
                ? question.options 
                : JSON.parse(question.options || '[]');
                
            if (optionsArray.length > 0) {
                const translatedOptions = await translateOptions(optionsArray, targetLanguage);
                translated.options = translatedOptions;
            }
        }
        
        return translated;
        
    } catch (error) {
        console.error('Question translation error:', error);
        return question; // Fallback –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª
    }
}

// –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
async function translateQuestions(questions, targetLanguage) {
    if (targetLanguage === 'en' || !questions || questions.length === 0) {
        return questions;
    }
    
    console.log(`üåç Translating ${questions.length} questions to ${LANGUAGE_NAMES[targetLanguage] || targetLanguage}...`);
    
    try {
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
        const batchSize = 5; // –ü–æ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        const translatedQuestions = [];
        
        for (let i = 0; i < questions.length; i += batchSize) {
            const batch = questions.slice(i, i + batchSize);
            const translatedBatch = await Promise.all(
                batch.map(q => translateQuestion(q, targetLanguage))
            );
            translatedQuestions.push(...translatedBatch);
        }
        
        console.log(`‚úÖ Translation completed: ${translatedQuestions.length} questions`);
        
        return translatedQuestions;
        
    } catch (error) {
        console.error('Batch translation error:', error);
        return questions; // Fallback –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª
    }
}

// –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à (–¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏)
function clearTranslationCache() {
    translationCache.clear();
    console.log('üóëÔ∏è Translation cache cleared');
    return { success: true, message: 'Cache cleared' };
}

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
function getCacheStats() {
    return {
        size: translationCache.size,
        languages: Array.from(new Set(
            Array.from(translationCache.keys()).map(k => k.split(':')[0])
        ))
    };
}

module.exports = {
    translateText,
    translateOptions,
    translateQuestion,
    translateQuestions,
    clearTranslationCache,
    getCacheStats,
    LANGUAGE_NAMES
};

