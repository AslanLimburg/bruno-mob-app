const express = require('express');
const router = express.Router();
const { authMiddleware } = require('../middleware/auth');

// –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
const {
    createOrUpdateProfile,
    getUserProfile,
    updateLanguage,
    checkAccess
} = require('../services/vectorDestiny/profileService');

const {
    startTrialSubscription,
    subscribe,
    cancelSubscription,
    getSubscriptionStatus,
    getBillingHistory,
    SUBSCRIPTION_PRICES,
    TRIAL_DAYS
} = require('../services/vectorDestiny/subscriptionService');

const {
    generateForecast,
    getUserForecast
} = require('../services/vectorDestiny/forecastService');

// –í—Å–µ routes —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
router.use(authMiddleware);

// ==========================================
// ACCESS & INFO
// ==========================================

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—é
router.get('/access', async (req, res) => {
    try {
        const result = await checkAccess(req.userId);
        res.json(result);
    } catch (error) {
        res.status(500).json({ success: false, message: error.message });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö
router.get('/pricing', async (req, res) => {
    try {
        res.json({
            success: true,
            data: {
                prices: SUBSCRIPTION_PRICES,
                trial_days: TRIAL_DAYS,
                currency: 'BRT'
            }
        });
    } catch (error) {
        res.status(500).json({ success: false, message: error.message });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏
router.get('/languages', async (req, res) => {
    try {
        const languages = [
            { code: 'en', name: 'English', nativeName: 'English', flag: 'üá¨üáß' },
            { code: 'ru', name: 'Russian', nativeName: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
            { code: 'ar', name: 'Arabic', nativeName: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', flag: 'üá¶üá™' },
            { code: 'es', name: 'Spanish', nativeName: 'Espa√±ol', flag: 'üá™üá∏' },
            { code: 'zh', name: 'Chinese', nativeName: '‰∏≠Êñá', flag: 'üá®üá≥' },
            { code: 'hi', name: 'Hindi', nativeName: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä', flag: 'üáÆüá≥' },
            { code: 'fr', name: 'French', nativeName: 'Fran√ßais', flag: 'üá´üá∑' },
            { code: 'de', name: 'German', nativeName: 'Deutsch', flag: 'üá©üá™' }
        ];
        
        res.json({ success: true, data: languages });
    } catch (error) {
        res.status(500).json({ success: false, message: error.message });
    }
});

// ==========================================
// PROFILE
// ==========================================

// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
router.get('/profile', async (req, res) => {
    try {
        const result = await getUserProfile(req.userId);
        res.json(result);
    } catch (error) {
        res.status(500).json({ success: false, message: error.message });
    }
});

// –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–∞–Ω–∫–µ—Ç–∞)
router.post('/profile', async (req, res) => {
    try {
        const result = await createOrUpdateProfile(req.userId, req.body);
        res.json(result);
    } catch (error) {
        res.status(500).json({ success: false, message: error.message });
    }
});

// –û–±–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫
router.post('/profile/language', async (req, res) => {
    try {
        const { language } = req.body;
        
        if (!language) {
            return res.status(400).json({
                success: false,
                message: 'Language is required'
            });
        }
        
        const result = await updateLanguage(req.userId, language);
        res.json(result);
    } catch (error) {
        res.status(500).json({ success: false, message: error.message });
    }
});

// ==========================================
// SUBSCRIPTION
// ==========================================

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
router.get('/subscription', async (req, res) => {
    try {
        const result = await getSubscriptionStatus(req.userId);
        res.json(result);
    } catch (error) {
        res.status(500).json({ success: false, message: error.message });
    }
});

// –ù–∞—á–∞—Ç—å trial (7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ)
router.post('/subscription/trial', async (req, res) => {
    try {
        const { membership_level } = req.body;
        
        if (!membership_level) {
            return res.status(400).json({
                success: false,
                message: 'Membership level is required'
            });
        }
        
        const result = await startTrialSubscription(req.userId, membership_level);
        res.json(result);
    } catch (error) {
        res.status(500).json({ success: false, message: error.message });
    }
});

// –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è (–æ–ø–ª–∞—Ç–∞ BRT)
router.post('/subscription/subscribe', async (req, res) => {
    try {
        const { membership_level } = req.body;
        
        if (!membership_level) {
            return res.status(400).json({
                success: false,
                message: 'Membership level is required'
            });
        }
        
        const result = await subscribe(req.userId, membership_level);
        res.json(result);
    } catch (error) {
        res.status(500).json({ success: false, message: error.message });
    }
});

// –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
router.post('/subscription/cancel', async (req, res) => {
    try {
        const result = await cancelSubscription(req.userId);
        res.json(result);
    } catch (error) {
        res.status(500).json({ success: false, message: error.message });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π
router.get('/subscription/history', async (req, res) => {
    try {
        const result = await getBillingHistory(req.userId);
        res.json(result);
    } catch (error) {
        res.status(500).json({ success: false, message: error.message });
    }
});

// ==========================================
// FORECAST
// ==========================================

// –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑
router.post('/forecast/generate', async (req, res) => {
    try {
        const result = await generateForecast(req.userId);
        res.json(result);
    } catch (error) {
        res.status(500).json({ success: false, message: error.message });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–ª–∏ –ø–æ ID)
router.get('/forecast/:id?', async (req, res) => {
    try {
        const forecastId = req.params.id ? parseInt(req.params.id) : null;
        const result = await getUserForecast(req.userId, forecastId);
        res.json(result);
    } catch (error) {
        res.status(500).json({ success: false, message: error.message });
    }
});

// ==========================================
// QUESTIONS (–¥–ª—è –∞–Ω–∫–µ—Ç—ã)
// ==========================================

// –ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —É—Ä–æ–≤–Ω—è
router.get('/questions', async (req, res) => {
    try {
        const { level } = req.query;
        const { pool } = require('../config/database');
        
        if (!level) {
            return res.status(400).json({
                success: false,
                message: 'Level is required'
            });
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é —É—Ä–æ–≤–Ω–µ–π
        const levelHierarchy = {
            'GS-I': ['all', 'GS-I'],
            'GS-II': ['all', 'GS-I', 'GS-II'],
            'GS-III': ['all', 'GS-I', 'GS-II', 'GS-III'],
            'GS-IV': ['all', 'GS-I', 'GS-II', 'GS-III', 'GS-IV']
        };
        
        const levelsToLoad = levelHierarchy[level] || ['all', 'GS-I'];
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –¥–æ —Ç–µ–∫—É—â–µ–≥–æ
        const result = await pool.query(
            `SELECT * FROM vector_questions 
             WHERE membership_level = ANY($1)
             ORDER BY 
                CASE membership_level 
                    WHEN 'all' THEN 0
                    WHEN 'GS-I' THEN 1
                    WHEN 'GS-II' THEN 2
                    WHEN 'GS-III' THEN 3
                    WHEN 'GS-IV' THEN 4
                END,
                order_index, 
                id`,
            [levelsToLoad]
        );
        
        console.log(`üìã Loading questions for ${level}: ${result.rows.length} questions`);
        
        res.json({
            success: true,
            data: result.rows
        });
    } catch (error) {
        console.error('Get questions error:', error);
        res.status(500).json({ success: false, message: error.message });
    }
});

module.exports = router;