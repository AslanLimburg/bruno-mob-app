const pool = require('../config/database');

class LedgerService {
  /**
   * –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ challenge_ledger
   */
  async createLedgerEntry(client, {
    challengeId,
    betId = null,
    userId,
    transactionType,
    amount,
    balanceBefore,
    balanceAfter
  }) {
    const query = `
      INSERT INTO challenge_ledger (
        challenge_id, bet_id, user_id, transaction_type,
        amount, balance_before, balance_after
      )
      VALUES ($1, $2, $3, $4, $5, $6, $7)
      RETURNING *
    `;

    const values = [
      challengeId,
      betId,
      userId,
      transactionType,
      amount,
      balanceBefore,
      balanceAfter
    ];

    const result = await client.query(query, values);
    return result.rows[0];
  }

  /**
   * –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å BRT –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Å—Ç–∞–≤–∫–∏)
   */
  async lockBalance(client, userId, amount, challengeId, betId) {
    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    const balanceQuery = `
      SELECT balance
      FROM user_balances
      WHERE user_id = $1 AND crypto = 'BRT'
      FOR UPDATE
    `;
    const balanceResult = await client.query(balanceQuery, [userId]);

    if (balanceResult.rows.length === 0) {
      throw new Error('User balance not found');
    }

    const currentBalance = parseFloat(balanceResult.rows[0].balance);

    if (currentBalance < amount) {
      throw new Error('Insufficient balance');
    }

    const newBalance = currentBalance - amount;

    // –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å
    const updateQuery = `
      UPDATE user_balances
      SET balance = $1
      WHERE user_id = $2 AND crypto = 'BRT'
    `;
    await client.query(updateQuery, [newBalance, userId]);

    // –°–æ–∑–¥–∞—Ç—å ledger entry
    await this.createLedgerEntry(client, {
      challengeId,
      betId,
      userId,
      transactionType: 'stake_locked',
      amount: -amount,
      balanceBefore: currentBalance,
      balanceAfter: newBalance
    });

    return newBalance;
  }

  /**
   * ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –í—ã–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–∏–∑ –∏–∑ admin —Å –≤—ã—á–µ—Ç–æ–º 20% –∫–æ–º–∏—Å—Å–∏–∏
   * Admin –ø–ª–∞—Ç–∏—Ç –ø–æ–ª–Ω—É—é —Å—É–º–º—É, –Ω–æ 20% –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è admin –∫–∞–∫ –∫–æ–º–∏—Å—Å–∏—è
   */
  async creditPayoutFromAdmin(client, userId, fullPrizeAmount, challengeId, betId) {
    const adminId = 1;
    const adminFee = fullPrizeAmount * 0.20; // 20% –∫–æ–º–∏—Å—Å–∏—è
    const actualPayout = fullPrizeAmount * 0.80; // 80% –ø–æ–±–µ–¥–∏—Ç–µ–ª—é

    // 1. –í—ã—á–µ—Å—Ç—å –ø–æ–ª–Ω—É—é —Å—É–º–º—É –∏–∑ admin
    const adminBalanceQuery = `
      SELECT balance FROM user_balances
      WHERE user_id = $1 AND crypto = 'BRT'
      FOR UPDATE
    `;
    const adminBalanceResult = await client.query(adminBalanceQuery, [adminId]);

    if (adminBalanceResult.rows.length === 0) {
      throw new Error('Admin balance not found');
    }

    const adminBalanceBefore = parseFloat(adminBalanceResult.rows[0].balance);
    
    if (adminBalanceBefore < fullPrizeAmount) {
      throw new Error(`Insufficient admin balance. Need ${fullPrizeAmount} BRT, have ${adminBalanceBefore} BRT`);
    }

    const adminBalanceAfterDeduct = adminBalanceBefore - fullPrizeAmount;

    await client.query(
      `UPDATE user_balances SET balance = $1, updated_at = NOW()
       WHERE user_id = $2 AND crypto = 'BRT'`,
      [adminBalanceAfterDeduct, adminId]
    );

    // 2. –í–µ—Ä–Ω—É—Ç—å 20% –∫–æ–º–∏—Å—Å–∏–∏ admin
    const adminBalanceAfterFee = adminBalanceAfterDeduct + adminFee;

    await client.query(
      `UPDATE user_balances SET balance = $1, updated_at = NOW()
       WHERE user_id = $2 AND crypto = 'BRT'`,
      [adminBalanceAfterFee, adminId]
    );

    // 3. –í—ã–ø–ª–∞—Ç–∏—Ç—å 80% –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
    const userBalanceQuery = `
      SELECT balance FROM user_balances
      WHERE user_id = $1 AND crypto = 'BRT'
      FOR UPDATE
    `;
    const userBalanceResult = await client.query(userBalanceQuery, [userId]);

    if (userBalanceResult.rows.length === 0) {
      throw new Error('User balance not found');
    }

    const userBalanceBefore = parseFloat(userBalanceResult.rows[0].balance);
    const userBalanceAfter = userBalanceBefore + actualPayout;

    await client.query(
      `UPDATE user_balances SET balance = $1, updated_at = NOW()
       WHERE user_id = $2 AND crypto = 'BRT'`,
      [userBalanceAfter, userId]
    );

    // 4. –°–æ–∑–¥–∞—Ç—å ledger entries
    await this.createLedgerEntry(client, {
      challengeId,
      betId,
      userId,
      transactionType: 'payout',
      amount: actualPayout,
      balanceBefore: userBalanceBefore,
      balanceAfter: userBalanceAfter
    });

    await this.createLedgerEntry(client, {
      challengeId,
      betId: null,
      userId: adminId,
      transactionType: 'commission',
      amount: adminFee,
      balanceBefore: adminBalanceAfterDeduct,
      balanceAfter: adminBalanceAfterFee
    });

    // 5. –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ transactions
    await client.query(
      `INSERT INTO transactions (from_user_id, to_user_id, crypto, amount, type, status, metadata)
       VALUES (1, $1, 'BRT', $2, 'challenge_prize', 'completed', $3::jsonb)`,
      [userId, actualPayout, JSON.stringify({
        full_prize: fullPrizeAmount,
        admin_fee: adminFee,
        payout: actualPayout,
        challenge_id: challengeId,
        bet_id: betId
      })]
    );

    console.log(`üí∞ Prize paid: ${fullPrizeAmount} BRT ‚Üí User ${userId} received ${actualPayout} BRT, admin kept ${adminFee} BRT`);

    return {
      fullPrize: fullPrizeAmount,
      adminFee: adminFee,
      actualPayout: actualPayout,
      userBalanceAfter: userBalanceAfter
    };
  }

  /**
   * –ù–∞—á–∏—Å–ª–∏—Ç—å –≤—ã–∏–≥—Ä—ã—à –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–°–¢–ê–†–ê–Ø –§–£–ù–ö–¶–ò–Ø - –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨)
   * @deprecated –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å creditPayoutFromAdmin() –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ
   */
  async creditPayout(client, userId, amount, challengeId, betId) {
    console.warn('‚ö†Ô∏è creditPayout() is deprecated. Use creditPayoutFromAdmin() instead');
    
    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    const balanceQuery = `
      SELECT balance
      FROM user_balances
      WHERE user_id = $1 AND crypto = 'BRT'
      FOR UPDATE
    `;
    const balanceResult = await client.query(balanceQuery, [userId]);

    if (balanceResult.rows.length === 0) {
      throw new Error('User balance not found');
    }

    const currentBalance = parseFloat(balanceResult.rows[0].balance);
    const newBalance = currentBalance + amount;

    // –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å
    const updateQuery = `
      UPDATE user_balances
      SET balance = $1
      WHERE user_id = $2 AND crypto = 'BRT'
    `;
    await client.query(updateQuery, [newBalance, userId]);

    // –°–æ–∑–¥–∞—Ç—å ledger entry
    await this.createLedgerEntry(client, {
      challengeId,
      betId,
      userId,
      transactionType: 'payout',
      amount: amount,
      balanceBefore: currentBalance,
      balanceAfter: newBalance
    });

    return newBalance;
  }

  /**
   * –ù–∞—á–∏—Å–ª–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é –Ω–∞ admin –∞–∫–∫–∞—É–Ω—Ç (–°–¢–ê–†–ê–Ø –§–£–ù–ö–¶–ò–Ø - –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨)
   * @deprecated –ö–æ–º–∏—Å—Å–∏—è —Ç–µ–ø–µ—Ä—å –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ creditPayoutFromAdmin()
   */
  async creditCommission(client, adminId, amount, challengeId) {
    console.warn('‚ö†Ô∏è creditCommission() is deprecated. Commission is now handled in creditPayoutFromAdmin()');
    
    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å admin
    const balanceQuery = `
      SELECT balance
      FROM user_balances
      WHERE user_id = $1 AND crypto = 'BRT'
      FOR UPDATE
    `;
    const balanceResult = await client.query(balanceQuery, [adminId]);

    if (balanceResult.rows.length === 0) {
      throw new Error('Admin balance not found');
    }

    const currentBalance = parseFloat(balanceResult.rows[0].balance);
    const newBalance = currentBalance + amount;

    // –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å
    const updateQuery = `
      UPDATE user_balances
      SET balance = $1
      WHERE user_id = $2 AND crypto = 'BRT'
    `;
    await client.query(updateQuery, [newBalance, adminId]);

    // –°–æ–∑–¥–∞—Ç—å ledger entry
    await this.createLedgerEntry(client, {
      challengeId,
      betId: null,
      userId: adminId,
      transactionType: 'commission',
      amount: amount,
      balanceBefore: currentBalance,
      balanceAfter: newBalance
    });

    return newBalance;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (refund)
   */
  async refundBet(client, userId, amount, challengeId, betId) {
    const adminId = 1;

    // 1. –í—ã—á–µ—Å—Ç—å –∏–∑ admin (–≤–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –ø—Ä–∏ —Å—Ç–∞–≤–∫–µ)
    await client.query(
      `UPDATE user_balances SET balance = balance - $1, updated_at = NOW()
       WHERE user_id = $2 AND crypto = 'BRT'`,
      [amount, adminId]
    );

    // 2. –í–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const balanceQuery = `
      SELECT balance FROM user_balances
      WHERE user_id = $1 AND crypto = 'BRT'
      FOR UPDATE
    `;
    const balanceResult = await client.query(balanceQuery, [userId]);

    if (balanceResult.rows.length === 0) {
      throw new Error('User balance not found');
    }

    const currentBalance = parseFloat(balanceResult.rows[0].balance);
    const newBalance = currentBalance + amount;

    await client.query(
      `UPDATE user_balances SET balance = $1, updated_at = NOW()
       WHERE user_id = $2 AND crypto = 'BRT'`,
      [newBalance, userId]
    );

    // 3. –°–æ–∑–¥–∞—Ç—å ledger entry
    await this.createLedgerEntry(client, {
      challengeId,
      betId,
      userId,
      transactionType: 'refund',
      amount: amount,
      balanceBefore: currentBalance,
      balanceAfter: newBalance
    });

    // 4. –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await client.query(
      `INSERT INTO transactions (from_user_id, to_user_id, crypto, amount, type, status)
       VALUES (1, $1, 'BRT', $2, 'challenge_refund', 'completed')`,
      [userId, amount]
    );

    console.log(`üîÑ Refund: ${amount} BRT returned to user ${userId} from admin`);

    return newBalance;
  }

  /**
   * –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å creator prize (–¥–ª—è fixed_creator_prize mode)
   */
  async reserveCreatorPrize(client, creatorId, amount, challengeId) {
    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    const balanceQuery = `
      SELECT balance
      FROM user_balances
      WHERE user_id = $1 AND crypto = 'BRT'
      FOR UPDATE
    `;
    const balanceResult = await client.query(balanceQuery, [creatorId]);

    if (balanceResult.rows.length === 0) {
      throw new Error('Creator balance not found');
    }

    const currentBalance = parseFloat(balanceResult.rows[0].balance);

    if (currentBalance < amount) {
      throw new Error('Insufficient balance to reserve creator prize');
    }

    const newBalance = currentBalance - amount;

    // –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å
    const updateQuery = `
      UPDATE user_balances
      SET balance = $1
      WHERE user_id = $2 AND crypto = 'BRT'
    `;
    await client.query(updateQuery, [newBalance, creatorId]);

    // –°–æ–∑–¥–∞—Ç—å ledger entry
    await this.createLedgerEntry(client, {
      challengeId,
      betId: null,
      userId: creatorId,
      transactionType: 'creator_prize_reserve',
      amount: -amount,
      balanceBefore: currentBalance,
      balanceAfter: newBalance
    });

    return newBalance;
  }
}

module.exports = new LedgerService();