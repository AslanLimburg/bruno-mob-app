const pool = require('../config/database');
const payoutWorker = require('../workers/payoutWorker');

class PayoutScheduler {
  constructor() {
    this.isProcessing = false;
    this.maxAttempts = 3;
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å scheduler (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ server.js)
   */
  start() {
    console.log('üïê Payout Scheduler started (runs every minute)');
    
    // –ó–∞–ø—É—Å–∫–∞—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    this.intervalId = setInterval(() => {
      this.processPendingJobs();
    }, 60000); // 60 —Å–µ–∫—É–Ω–¥

    // –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    this.processPendingJobs();
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å scheduler
   */
  stop() {
    if (this.intervalId) {
      clearInterval(this.intervalId);
      console.log('üõë Payout Scheduler stopped');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ pending payout jobs
   */
  async processPendingJobs() {
    if (this.isProcessing) {
      console.log('‚è≥ Payout processing already in progress, skipping...');
      return;
    }

    this.isProcessing = true;

    try {
      // –ù–∞–π—Ç–∏ –≤—Å–µ pending jobs
      const query = `
        SELECT pj.*, c.title as challenge_title
        FROM payout_jobs pj
        JOIN challenges c ON pj.challenge_id = c.id
        WHERE pj.status = 'pending'
          AND pj.attempt_count < $1
        ORDER BY pj.created_at ASC
        LIMIT 10
      `;

      const result = await pool.query(query, [this.maxAttempts]);
      const jobs = result.rows;

      if (jobs.length === 0) {
        return;
      }

      console.log(`\nüîî Found ${jobs.length} pending payout job(s)`);

      // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π job
      for (const job of jobs) {
        await this.processJob(job);
      }

    } catch (error) {
      console.error('‚ùå Error in payout scheduler:', error.message);
    } finally {
      this.isProcessing = false;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω payout job
   */
  async processJob(job) {
    console.log(`\nüì¶ Processing payout job ${job.id} for challenge ${job.challenge_id} (${job.challenge_title})`);
    console.log(`   Attempt ${job.attempt_count + 1}/${this.maxAttempts}`);

    try {
      // –û–±–Ω–æ–≤–∏—Ç—å status –Ω–∞ 'processing'
      await pool.query(
        `UPDATE payout_jobs 
         SET status = 'processing', started_at = NOW()
         WHERE id = $1`,
        [job.id]
      );

      // –ó–∞–ø—É—Å—Ç–∏—Ç—å payout worker
      const result = await payoutWorker.processPayouts(job.challenge_id);

      console.log(`‚úÖ Payout job ${job.id} completed successfully`);
      console.log(`   Winning bets: ${result.winningBetsCount}`);
      console.log(`   Total distributed: ${result.distributableAmount?.toFixed(2) || 0} BRT`);

    } catch (error) {
      console.error(`‚ùå Payout job ${job.id} failed:`, error.message);

      const attemptCount = job.attempt_count + 1;

      if (attemptCount >= this.maxAttempts) {
        // –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        console.error(`   Max attempts (${this.maxAttempts}) reached. Job marked as failed.`);
        
        await pool.query(
          `UPDATE payout_jobs 
           SET status = 'failed',
               error_message = $1,
               attempt_count = $2
           WHERE id = $3`,
          [error.message, attemptCount, job.id]
        );
      } else {
        // –í–µ—Ä–Ω—É—Ç—å –≤ pending –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
        console.log(`   Will retry later (attempt ${attemptCount}/${this.maxAttempts})`);
        
        await pool.query(
          `UPDATE payout_jobs 
           SET status = 'pending',
               error_message = $1,
               attempt_count = $2
           WHERE id = $3`,
          [error.message, attemptCount, job.id]
        );
      }
    }
  }

  /**
   * –†—É—á–Ω–æ–π trigger –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞
   */
  async triggerManualPayout(challengeId) {
    console.log(`\nüéØ Manual payout trigger for challenge ${challengeId}`);

    try {
      const result = await payoutWorker.processPayouts(challengeId);
      return {
        success: true,
        message: 'Payout processed successfully',
        data: result
      };
    } catch (error) {
      console.error(`‚ùå Manual payout failed:`, error.message);
      return {
        success: false,
        message: error.message
      };
    }
  }
}

module.exports = new PayoutScheduler();
